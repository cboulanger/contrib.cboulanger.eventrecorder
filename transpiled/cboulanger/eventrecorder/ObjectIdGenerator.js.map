{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/eventrecorder/source/class/cboulanger/eventrecorder/ObjectIdGenerator.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "include",
    "cboulanger",
    "eventrecorder",
    "MHelperMethods",
    "statics",
    "DEFAULT_LISTENED_EVENTS",
    "events",
    "members",
    "init",
    "event",
    "Timer",
    "once",
    "assignObjectIdsToChildren",
    "Init",
    "getApplication",
    "getRoot",
    "fireEvent",
    "addGlobalEventListener",
    "target",
    "getType",
    "generateId",
    "qxObj",
    "clazz",
    "classname",
    "substr",
    "lastIndexOf",
    "generateQxObjectId",
    "obj",
    "owner",
    "id",
    "getQxObjectId",
    "setQxObjectId",
    "siblingWithSameName",
    "postfix",
    "addOwnedQxObject",
    "e",
    "Id",
    "getInstance",
    "register",
    "parent",
    "level",
    "children",
    "getChildren",
    "getLayoutChildren",
    "length",
    "child",
    "ui",
    "tooltip",
    "ToolTip",
    "otherChildRoots",
    "push",
    "getChildControl",
    "getSelection",
    "getMenu",
    "addListener",
    "_manager",
    "getPane",
    "getSelectionModel",
    "getPrototypeOf",
    "evt_name",
    "Registration",
    "getManager",
    "findHandler",
    "hasListener",
    "forEach",
    "childRoot",
    "defer",
    "bom",
    "Lifecycle",
    "onReady",
    "ObjectIdGenerator"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * When added to the `applications[x].include` section of `compile.json`,\n * this class will automatically assign ids to all the widgets in the\n * widget hierarchy, i.e. all objects that are added as child object via\n * the `add()` method provided my `qx.ui.core.MChildrenHandling`. The id\n * generator assigns ids to all widgets that do not already have an id\n * using the last part of the class namespace plus the integer hash code of\n * the widget. This will result in absolute ids of the form\n * `Composite50/Scroll117/TabView120/TabPage147`\n */\nqx.Class.define(\"cboulanger.eventrecorder.ObjectIdGenerator\", {\n  type: \"singleton\",\n  extend: qx.core.Object,\n  include : [cboulanger.eventrecorder.MHelperMethods],\n  statics: {\n    DEFAULT_LISTENED_EVENTS: [\n      \"tap\", \"dbltap\", \"contextmenu\"\n    ]\n  },\n  events: {\n    \"done\" : \"qx.event.type.Event\"\n  },\n  members: {\n\n    /**\n     * Start automatically assigning ids.\n     */\n    init: function() {\n      // start generating ids with a delay because rendering widgets is asynchrous\n      qx.event.Timer.once(() => {\n        this.assignObjectIdsToChildren(qx.core.Init.getApplication().getRoot());\n        this.fireEvent(\"done\");\n      }, null, 2000);\n      this.addGlobalEventListener((target, event) => {\n        if (event.getType() === \"appear\") {\n          this.assignObjectIdsToChildren(qx.core.Init.getApplication().getRoot());\n        }\n      });\n    },\n\n    /**\n     * Given a {@link qx.core.Object}, return an id for it, which is the last\n     * part of the class name\n     * @param qxObj {qx.core.Object}\n     * @return {String}\n     */\n    generateId: function(qxObj) {\n      let clazz = qxObj.classname;\n      return clazz.substr(clazz.lastIndexOf(\".\")+1);\n    },\n\n    /**\n     * Given an object and its parent, set its object id and add it to the\n     * parent's owned objects. If the object doesn't have a parent or the\n     * parent has no object id, register the object as a global id root.\n     * @param obj The object to assign an object id to\n     * @param owner The owning parent object\n     * @param id {String|undefined} Optional id. If not given, generate an id from\n     * the class name\n     */\n    generateQxObjectId: function(obj, owner, id) {\n      if (!obj || typeof obj.getQxObjectId != \"function\" || obj.getQxObjectId()) {\n        return;\n      }\n      id = id || this.generateId(obj);\n      obj.setQxObjectId(id);\n      if (owner && owner.getQxObjectId()) {\n        // if the parent has an id, we add the child as an owned object\n        let siblingWithSameName = false;\n        let postfix = 1;\n        do {\n          try {\n            owner.addOwnedQxObject(obj);\n            siblingWithSameName=false;\n            // console.log(`Adding ${obj} to ${parent} with id '${id}'`);\n          } catch (e) {\n            // name already exists, append a number\n            siblingWithSameName = true;\n            postfix++;\n            obj.setQxObjectId(id+postfix);\n          }\n        } while (siblingWithSameName);\n      } else {\n        // otherwise, we register it as a top-level object\n        //console.log(`Registering ${obj} as global id root with id '${id}'`);\n        qx.core.Id.getInstance().register(obj, id);\n      }\n    },\n\n    /**\n     * Recursively assigns object ids to the children of the given parent widget.\n     * @param parent {qx.ui.core.Widget|qx.ui.core.MChildrenHandling} An object that must include\n     * the qx.ui.core.MChildrenHandling mixin.\n     * @param level {Number}\n     */\n    assignObjectIdsToChildren: function(parent, level=0) {\n      if (!parent) {\n        return;\n      }\n      let children =\n        typeof parent.getChildren == \"function\" ?\n          parent.getChildren() :\n          typeof parent.getLayoutChildren == \"function\" ?\n            parent.getLayoutChildren() : null;\n      // let msg = \"    \".repeat(level) + parent.classname;\n      // if ( !children || ! children.length) {\n      //   console.log(msg + \" (no children)\");\n      //   return;\n      // }\n      // console.log(msg);\n      if (!children || !children.length) {\n        return;\n      }\n      for (let child of children) {\n\n       // ignore tooltipps\n       if (child instanceof qx.ui.tooltip.ToolTip) {\n         continue;\n       }\n        // assign object id and add to parent if neccessary\n        this.generateQxObjectId(child, parent);\n        // handle special cases\n        let otherChildRoots = [];\n        let id;\n        let obj = child;\n        // traverse prototype chain to catch extended types\n        while (obj instanceof qx.core.Object) {\n          switch (obj.classname) {\n            case \"qx.core.Object\":\n              break;\n            case \"qx.ui.form.ComboBox\":\n              otherChildRoots.push(child.getChildControl(\"textfield\"));\n              break;\n            case \"qx.ui.form.VirtualSelectBox\":\n              otherChildRoots.push(child.getSelection());\n              break;\n            case \"qx.ui.groupbox.GroupBox\":\n              otherChildRoots.push(child.getChildControl(\"frame\"));\n              break;\n            case \"qx.ui.form.MenuButton\":\n            case \"qx.ui.toolbar.MenuButton\":\n            case \"qx.ui.menubar.Button\":\n              otherChildRoots.push(child.getMenu());\n              break;\n            case \"qx.ui.tree.Tree\":\n              otherChildRoots.push(child.getChildControl(\"pane\"));\n              break;\n            case \"qx.ui.tree.VirtualTree\":\n              child.addListener(\"open\", () => {});\n              child.addListener(\"close\", () => {});\n              otherChildRoots.push(child._manager);\n              otherChildRoots.push(child.getPane());\n              break;\n            case \"qx.ui.treevirtual.TreeVirtual\":\n              child.addListener(\"treeClose\", () => {});\n              child.addListener(\"treeOpenWithContent\", () => {});\n              child.addListener(\"treeOpenWhileEmpty\", () => {});\n            // fallthrough\n            case \"qx.ui.table.Table\":\n              otherChildRoots.push(child.getSelectionModel());\n              id = \"Selection\";\n              break;\n            case \"qx.ui.list.List\":\n              otherChildRoots.push(child.getSelection());\n              id = \"Selection\";\n              break;\n            case \"qx.ui.tabview.Page\":\n              this.generateQxObjectId(child.getChildControl(\"button\"), child);\n              break;\n            default:\n              if (child instanceof qx.core.Object) {\n                obj = Object.getPrototypeOf(obj);\n                // continue while loop\n                continue;\n              }\n          }\n          // break out of while loop\n          break;\n        }\n\n        // add an empty event listener for the defined default events so\n        // that they will be recorded\n        for (let evt_name of this.self(arguments).DEFAULT_LISTENED_EVENTS) {\n          if (qx.event.Registration.getManager(child).findHandler(child, evt_name) && !child.hasListener(evt_name)) {\n            child.addListener(evt_name, () => {});\n          }\n        }\n\n        // recurse into other child roots outside the layout hierarchy\n        // that fire events relevant to the recorder\n        if (otherChildRoots.length) {\n          otherChildRoots.forEach(childRoot => {\n            this.generateQxObjectId(childRoot, child, id);\n            this.assignObjectIdsToChildren(childRoot, level+1);\n          });\n        }\n        // recurse into layout children\n        this.assignObjectIdsToChildren(child, level+1);\n      }\n    }\n  },\n\n  /**\n   * Will be called after class has been loaded, before application startup\n   */\n  defer: function() {\n    if (qx.core.Environment.get(\"module.objectid\")) {\n      qx.bom.Lifecycle.onReady(() => cboulanger.eventrecorder.ObjectIdGenerator.getInstance().init());\n    }\n  }\n});\n"
  ]
}