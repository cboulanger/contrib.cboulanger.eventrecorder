{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/eventrecorder/source/class/cboulanger/eventrecorder/player/Qooxdoo.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "cboulanger",
    "eventrecorder",
    "player",
    "Abstract",
    "implement",
    "IPlayer",
    "properties",
    "canReplayInBrowser",
    "refine",
    "init",
    "members",
    "getType",
    "getExportFileExtension",
    "translate",
    "script",
    "lines",
    "_translate",
    "split",
    "map",
    "line",
    "startsWith",
    "filter",
    "Boolean",
    "unshift",
    "push",
    "join",
    "cmd_info",
    "text",
    "replace",
    "getMode",
    "cmd_hide_info",
    "cmd_widget_info",
    "id",
    "cmd_delay",
    "delayInMs",
    "Math",
    "min",
    "getMaxDelay",
    "cmd_wait",
    "timeInMs",
    "cmd_await_property_value",
    "property",
    "value",
    "generateWaitForConditionCode",
    "lang",
    "String",
    "firstUp",
    "JSON",
    "stringify",
    "cmd_await_property_match_json",
    "json",
    "Type",
    "isString",
    "regExLiteral",
    "createRegexpForJsonComparison",
    "timeoutmsg",
    "type",
    "generateWaitForEventCode",
    "cmd_await_event",
    "generateWaitForEventTimoutFunction",
    "undefined",
    "_globalRef",
    "cmd_await_event_data",
    "data",
    "e",
    "Error",
    "cmd_await_event_match_json",
    "cmd_assert_appeared",
    "cmd_check_appear",
    "cmd_assert_disappeared",
    "cmd_check_disappear",
    "cmd_execute",
    "cmd_contextmenu",
    "cmd_fire",
    "event",
    "cmd_tap",
    "cmd_dbltap",
    "cmd_set_value",
    "cmd_await_value",
    "cmd_open_tree_node",
    "nodeIndex",
    "cmd_close_tree_node",
    "cmd_open_tree_node_treevirtual",
    "cmd_close_tree_node_treevirtual",
    "cmd_set_selection",
    "selectedId",
    "cmd_await_selection",
    "cmd_set_model_selection",
    "indexArray",
    "cmd_set_selection_from_selectables",
    "index",
    "cmd_await_selection_from_selectables",
    "cmd_reset_selection",
    "cmd_set_table_selection",
    "interval",
    "cmd_set_row_selection",
    "rowIndex",
    "Qooxdoo"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n  UI Event Recorder\n\n  Copyright:\n    2018 Christian Boulanger\n\n  License:\n    MIT license\n    See the LICENSE file in the project's top-level directory for details.\n\n  Authors: Christian Boulanger\n\n\n************************************************************************ */\n\n/**\n * This is an event player that works in the client\n */\nqx.Class.define(\"cboulanger.eventrecorder.player.Qooxdoo\", {\n\n  extend: cboulanger.eventrecorder.player.Abstract,\n  implement: [cboulanger.eventrecorder.IPlayer],\n\n  properties: {\n    canReplayInBrowser: {\n      refine: true,\n      init: true\n    }\n  },\n\n  members:\n  {\n\n    /**\n     * Returns the player type\n     * @return {String}\n     */\n    getType() {\n      return \"qooxdoo\";\n    },\n\n\n    /**\n     * @inheritDoc\n     */\n    getExportFileExtension() {\n      return \"js\";\n    },\n\n    /**\n     * Translates the intermediate code into the target language\n     * @param script\n     * @return {string} executable code\n     */\n    async translate(script) {\n      let lines = (await this._translate(script))\n        .split(/\\n/)\n        .map(line => (line.startsWith(\"(\") ? `await ${line};` : line))\n        .filter(line => Boolean(line))\n        .map(line => \"  \" + line);\n      lines.unshift(\"async function test() {\");\n      lines.push(\"}\");\n      return lines.join(\"\\n\");\n    },\n\n    /*\n    ============================================================================\n       COMMANDS\n    ============================================================================\n    */\n\n    /**\n     * @inheritDoc\n     */\n    cmd_info(text) {\n      text = text.replace(/\"/g, \"\");\n      if (this.getMode() === \"presentation\") {\n        return `cboulanger.eventrecorder.InfoPane.getInstance().useIcon(\"info\").display(\"${text}\");`;\n      }\n      return `console.log(\"${text}\");`;\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_hide_info(text) {\n      if (this.getMode() === \"presentation\") {\n        return `cboulanger.eventrecorder.InfoPane.getInstance().hide();`;\n      }\n      return \"\";\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_widget_info(id, text) {\n      text = text.replace(/\"/g, \"\");\n      if (this.getMode() === \"presentation\") {\n        return `cboulanger.eventrecorder.InfoPane.getInstance().useIcon(\"info\").display(\"${text}\",qx.core.Id.getQxObject(\"${id}\"));`;\n      }\n      return \"\";\n    },\n\n    /**\n     * Generates code that causes the given delay (in milliseconds).\n     * The delay is capped by the {@link #cboulanger.eventrecorder.player.Abstract#maxDelay} property\n     * and will only be caused in presentation mode\n     * @param delayInMs {Number}\n     * @return {string}\n     */\n    cmd_delay(delayInMs) {\n      delayInMs = Math.min(delayInMs, this.getMaxDelay());\n      return this.getMode() === \"presentation\" && delayInMs > 0 ? `(new Promise(resolve => setTimeout(resolve,${delayInMs})))`:\"\";\n    },\n\n    /**\n     * Generates code that waits the given time in milliseconds, regardless of player mode\n     * @param timeInMs {Number}\n     * @return {string}\n     */\n    cmd_wait(timeInMs) {\n      return `(new Promise(resolve => setTimeout(resolve,${timeInMs})))`;\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_await_property_value(id, property, value) {\n      return this.generateWaitForConditionCode(`JSON.stringify(qx.core.Id.getQxObject(\"${id}\").get${qx.lang.String.firstUp(property)}())==='${JSON.stringify(value).replace(/'/, \"\\\\'\")}'`);\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_await_property_match_json(id, property, json) {\n      if (!qx.lang.Type.isString(json)) {\n        json = JSON.stringify(json);\n      }\n      let regExLiteral = this.createRegexpForJsonComparison(json);\n      let timeoutmsg = `Timeout waiting for ID(${id}).${property} to match /${regExLiteral.replace(/\\\\/, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\")}/.`;\n      let type = \"change\" + qx.lang.String.firstUp(property);\n      return this.generateWaitForEventCode(id, type, `{verbatim}/${regExLiteral}/`, timeoutmsg);\n    },\n\n    /**\n     * Generates code that returns a promise which resolves when the object with\n     * the given id fires an event with the given name.\n     * @param id {String} The id of the object\n     * @param type {String} The type of the event\n     * @return {*|string}\n     */\n    cmd_await_event(id, type) {\n      if (this.getMode()===\"presentation\") {\n        return this.generateWaitForEventTimoutFunction(id, type, undefined, `if (window[\"${this._globalRef}\"].isRunning()) cboulanger.eventrecorder.InfoPane.getInstance().show().animate(); else return resolve(false)`);\n      }\n      return this.generateWaitForEventCode(id, type);\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_await_event_data(id, type, data) {\n      if (data !== undefined) {\n        try {\n          JSON.stringify(data);\n        } catch (e) {\n          throw new Error(\"Data must be serializable to JSON\");\n        }\n      }\n      if (this.getMode() === \"presentation\") {\n        return this.generateWaitForEventTimoutFunction(id, type, data, `if (window[\"${this._globalRef}\"].isRunning()) cboulanger.eventrecorder.InfoPane.getInstance().show().animate(); else return resolve();`);\n      }\n      return this.generateWaitForEventCode(id, type, data);\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_await_event_match_json(id, type, json) {\n      if (this.getMode()===\"presentation\") {\n        return this.generateWaitForEventTimoutFunction(id, type, json, `if (window[\"${this._globalRef}\"].isRunning()) cboulanger.eventrecorder.InfoPane.getInstance().show().animate(); else return resolve();`);\n      }\n      return this.generateWaitForEventCode(id, type, json);\n    },\n\n    /**\n     * Generates code that returns a promise with resolves when the object with the given id becomes visible and rejects\n     * if the timeout is reached before that happens.\n     * @param id {String}\n     * @return {String}\n     */\n    cmd_assert_appeared(id) {\n      return `if(!qx.core.Id.getQxObject(\"${id}\").isVisible()) throw new Error(\"Failed: Object with id ${id} is not visible.\")`;\n    },\n\n    /**\n     * @deprecated\n     */\n    cmd_check_appear: this.cmd_assert_appeared,\n\n    /**\n     * Generates code that returns a promise with resolves when the object with the given id disappears and rejects\n     * if the timeout is reached before that happens.\n     * @param id {String}\n     * @return {String}\n     */\n    cmd_assert_disappeared(id) {\n      return `if (qx.core.Id.getQxObject(\"${id}\").isVisible()) throw new Error(\"Failed: Object with id ${id} is visible.\")`;\n    },\n\n    /**\n     * @deprecated\n     */\n    cmd_check_disappear: this.cmd_assert_disappeared,\n\n    /**\n     * @inheritDoc\n     * @return {String}\n     */\n    cmd_execute(id) {\n      return `if(!qx.core.Id.getQxObject(\"${id}\").isEnabled()) throw new Error(\"Failed: Object with id ${id} is not enabled.\"); qx.core.Id.getQxObject(\"${id}\").fireEvent(\"execute\");`;\n    },\n\n    /**\n     * @inheritDoc\n     * @return {String}\n     */\n    cmd_contextmenu(id) {\n      return `if(!qx.core.Id.getQxObject(\"${id}\").isEnabled()) throw new Error(\"Failed: Object with id ${id} is not enabled.\"); let tgt = qx.core.Id.getQxObject(\"${id}\").getContentElement().getDomElement(); let r = tgt.getBoundingClientRect(), clientX=parseInt((r.right+r.left)/2), clientY=parseInt((r.bottom+r.top)/2); qx.event.Registration.fireEvent(tgt, \"contextmenu\", qx.event.type.Mouse, [new MouseEvent(\"contextmenu\", {clientX,clientY}),tgt,null,true,true]);`;\n    },\n\n    /**\n     * Generates code that fires an event with the given payload on the object with the given id (Button, Command)\n     * @param id {String}\n     * @param event {String}\n     * @param json {*}\n     * @return {String}\n     */\n    cmd_fire(id, event, json) {\n      if (json) {\n        if (!qx.lang.Type.isString(json)) {\n          json = JSON.stringify(json);\n        }\n        return `qx.core.Id.getQxObject(\"${id}\").fireDataEvent(\"${event}\",${json});`;\n      }\n      return `qx.core.Id.getQxObject(\"${id}\").fireEvent(\"${event}\");`;\n    },\n\n    /**\n     * Generates code that fires an `tap` event on the object with the given id (Button, Command)\n     * @param id {String}\n     * @return {String}\n     */\n    cmd_tap(id) {\n      // doesn't work yet because it needs mouse data etc.\n      return \"\";\n      //return `qx.core.Id.getQxObject(\"${id}\").fireEvent(\"tap\", qx.event.type.Tap);`;\n    },\n\n    /**\n     * Generates code that fires an `dbltap` event on the object with the given id (Button, Command)\n     * @param id {String}\n     * @return {String}\n     */\n    cmd_dbltap(id) {\n      // doesn't work yet because it needs mouse data etc.\n      return \"\";\n      //return `qx.core.Id.getQxObject(\"${id}\").fireEvent(\"dbltap\", qx.event.type.Tap);`;\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_set_value(id, data) {\n      return `qx.core.Id.getQxObject(\"${id}\").setValue(${JSON.stringify(data)});`;\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_await_value(id, value) {\n      return this.cmd_await_property_value(id, \"value\", value);\n    },\n\n    /**\n     * Generates code that opens a the node with the given node id on the {@link qx.ui.tree.VirtualTree} with the given id\n     * @param id {String} The id of the {@link qx.ui.tree.VirtualTree}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_open_tree_node(id, nodeIndex) {\n      return `let t = qx.core.Id.getQxObject(\"${id}\"); t.openNode(t.getLookupTable().getItem(${nodeIndex}));`;\n    },\n\n    /**\n     * Generates code that closes a the node with the given node id on the {@link qx.ui.tree.VirtualTree} with the given id\n     * @param id {String} Id of the {@link qx.ui.treevirtual.TreeVirtual}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_close_tree_node(id, nodeIndex) {\n      return `let t = qx.core.Id.getQxObject(\"${id}\"); t.closeNode(t.getLookupTable().getItem(${nodeIndex}));`;\n    },\n\n    /**\n     * Generates code that opens a the node with the given node id on the {@link qx.ui.treevirtual.TreeVirtual} with the given id\n     * @param id {String} Id of the {@link qx.ui.treevirtual.TreeVirtual}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_open_tree_node_treevirtual(id, nodeIndex) {\n      return `qx.core.Id.getQxObject(\"${id}\").getDataModel().setState(${nodeIndex},{bOpened:true});`;\n    },\n\n    /**\n     * Generates code that closes a the node with the given node id on the {@link qx.ui.treevirtual.TreeVirtual} with the given id\n     * @param id {String} Id of the {@link qx.ui.treevirtual.TreeVirtual}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_close_tree_node_treevirtual(id, nodeIndex) {\n      return `qx.core.Id.getQxObject(\"${id}\").getDataModel().setState(${nodeIndex},{bOpened:false});`;\n    },\n\n    /**\n     * Generates code that sets a selection for all objects which have a `setSelection` method that\n     * takes an array of qooxdoo widgets that should be selected.\n     * @param id {String} Id of the object ón which the selection is set\n     * @param selectedId {String} The id of the widget that is selected. Only one widget can be selected at this time\n     * @return {String}\n     */\n    cmd_set_selection(id, selectedId) {\n      return `qx.core.Id.getQxObject(\"${id}\").setSelection([qx.core.Id.getQxObject(\"${selectedId}\")]);`;\n    },\n\n    /**\n     * Generates code that awaits a selection for all objects which have a `setSelection` method that\n     * takes an array of qooxdoo widgets that should be selected within the timeout\n     * @param id {String} Id of the object ón which the selection is set\n     * @param selectedId {String} The id of the widget that should be selected\n     * @return {String}\n     */\n    cmd_await_selection(id, selectedId) {\n      let timeoutmsg = `Timeout when waiting for selection of object '${selectedId}' on '${id}'.`;\n      return this.generateWaitForEventCode(id, \"changeSelection\", `{verbatim}[qx.core.Id.getQxObject(\"${selectedId}\")]`, timeoutmsg);\n    },\n\n    /**\n     * Generates code that sets a selection for all (virtual) widgets that have a data model\n     * @param id {String} The id of the widget on which the selection is set\n     * @param indexArray {Array} An array containing the indexes of the models\n     * @return {String}\n     */\n    cmd_set_model_selection(id, indexArray) {\n      return `let o = qx.core.Id.getQxObject(\"${id}\"); o.setSelection(new qx.data.Array(${JSON.stringify(indexArray)}.map(i => o.getModel().getItem(i))));`;\n    },\n\n    /**\n     * Generates code that awaits a selection for all (virtual) widgets that have a data model\n     * @param id {String} The id of the widget on which the selection is set\n     * @param indexArray {Array} An array containing the indexes of the models\n     * @return {String}\n     */\n    // cmd_await_model_selection(id, indexArray) {\n    //\n    //   return `let o = qx.core.Id.getQxObject(\"${id}\"); o.setSelection(new qx.data.Array(${JSON.stringify(indexArray)}.map(i => o.getModel().getItem(i))))`;\n    //   return `(waitForEvent(qx.core.Id.getQxObject(\"${id}\").getSelection(), \"change\",${data}, ${this.getTimeout()}, \"${timeoutmsg||\"Timeout waiting for event '\"+type+\"'\"}\"))`;\n    // },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_set_selection_from_selectables(id, index) {\n      return `let o = qx.core.Id.getQxObject(\"${id}\"); o.setSelection([o.getSelectables()[${index}]]);`;\n    },\n\n    /**\n     * @inheritDoc\n     */\n    cmd_await_selection_from_selectables(id, index) {\n      return this.generateWaitForEventCode(id, \"changeSelection\", `{verbatim}[qx.core.Id.getQxObject(\"${id}\").getSelectables()[${index}]]`);\n    },\n\n    /**\n     * Resets the selection of a widget that has a `selection` property or a `resetSelection` method.\n     * @param id {String} The id of the widget\n     * @return {string}\n     */\n    cmd_reset_selection(id) {\n      return `qx.core.Id.getQxObject(\"${id}\").resetSelection();`;\n    },\n\n    /**\n     * Generates code that sets an selection interval on a {@link qx.ui.table.Table}\n     * @param id {String} The id of a {@link qx.ui.table.Table}\n     * @param interval {String} The first and the last row to be selected, separated by comma.\n     * @return {String}\n     */\n    cmd_set_table_selection(id, interval) {\n      return `qx.core.Id.getQxObject(\"${id}\").addSelectionInterval(${interval});`;\n    },\n\n    /**\n     * Generates code that set the selection on a {@link qx.ui.virtual.selection.Row} object\n     * @param id {String} The id of a qx.ui.virtual.selection.Row object\n     * @param rowIndex {String|Number} The index of the row to be selected\n     * @return {String}\n     */\n    cmd_set_row_selection(id, rowIndex) {\n      return `qx.core.Id.getQxObject(\"${id}\").selectItem(${rowIndex});`;\n    }\n  }\n});\n"
  ]
}