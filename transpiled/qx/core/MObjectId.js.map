{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-recorder/qooxdoo/framework/source/class/qx/core/MObjectId.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "properties",
    "owner",
    "init",
    "check",
    "nullable",
    "apply",
    "objectId",
    "value",
    "indexOf",
    "members",
    "__ownedObjects",
    "__changingOwner",
    "_applyOwner",
    "oldValue",
    "Error",
    "_applyObjectId",
    "getOwner",
    "__onOwnedObjectIdChange",
    "_cascadeObjectIdChanges",
    "obj",
    "newId",
    "oldId",
    "getContentElement",
    "contentElement",
    "updateObjectId",
    "name",
    "getObject",
    "id",
    "undefined",
    "controlId",
    "pos",
    "substring",
    "result",
    "segs",
    "split",
    "target",
    "found",
    "every",
    "seg",
    "length",
    "tmp",
    "_createObject",
    "childControl",
    "getChildControl",
    "_createObjectImpl",
    "addOwnedObject",
    "thatOwner",
    "__removeOwnedObjectImpl",
    "getObjectId",
    "setOwner",
    "setObjectId",
    "removeOwnedObject",
    "args",
    "getOwnedObjects",
    "Object",
    "values",
    "core",
    "MObjectId"
  ],
  "mappings": "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",
  "file": "MObjectId.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2017 Zenesis Limited, http://www.zenesis.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * John Spackman (john.spackman@zenesis.com, @johnspackman)\n\n************************************************************************ */\n\n/**\n * A mixin providing objects by ID and owners.\n * \n * The typical use of IDs is to override the `_createObjectImpl` method and create\n * new instances on demand; all code should access these instances by calling\n * `getObject`.\n */\nqx.Mixin.define(\"qx.core.MObjectId\", {\n  \n  /*\n   * ****************************************************************************\n   * PROPERTIES\n   * ****************************************************************************\n   */\n\n  properties: {\n\n    /** The owning object */\n    owner : {\n      init : null,\n      check : \"qx.core.Object\",\n      nullable : true,\n      apply : \"_applyOwner\"\n    },\n\n\n    /** {String} The ID of the object.  */\n    objectId : {\n      init: null,\n      check : function(value) { return value === null || (typeof value == \"string\" && value.indexOf('/') < 0); },\n      nullable : true,\n      apply : \"_applyObjectId\"\n    }\n  },\n\n  /*\n   * ****************************************************************************\n   * MEMBERS\n   * ****************************************************************************\n   */\n\n  members: {\n    \n    __ownedObjects: null,\n    __changingOwner: false,\n\n    /**\n     * Apply owner\n     */\n    _applyOwner : function(value, oldValue) {\n      if (!this.__changingOwner) {\n        throw new Error(\"Please use API methods to change owner, not the property\");\n      }\n    },\n    \n    /**\n     * Apply objectId\n     */\n    _applyObjectId : function(value, oldValue) {\n      if (!this.__changingOwner) {\n        var owner = this.getOwner();\n        if (owner) {\n          owner.__onOwnedObjectIdChange(this, value, oldValue);\n        }\n        this._cascadeObjectIdChanges();\n      }\n    },\n    \n    /**\n     * Called when a child's objectId changes\n     */\n    __onOwnedObjectIdChange: function(obj, newId, oldId) {\n      delete this.__ownedObjects[oldId];\n      this.__ownedObjects[newId] = obj;\n    },\n    \n    /**\n     * Reflect changes to IDs or owners\n     */\n    _cascadeObjectIdChanges: function() {\n      if (typeof this.getContentElement == \"function\") {\n        var contentElement = this.getContentElement();\n        if (contentElement) {\n          contentElement.updateObjectId();\n        }\n      }\n      if (this.__ownedObjects) {\n        for (var name in this.__ownedObjects) {\n          this.__ownedObjects[name]._cascadeObjectIdChanges();\n        }\n      }\n    },\n    \n    /**\n     * Returns the object with the specified ID\n     * \n     * @param id\n     *          {String} ID of the object\n     * @return {qx.core.Object?} the found object\n     */\n    getObject: function(id) {\n      if (this.__ownedObjects) {\n        var obj = this.__ownedObjects[id];\n        if (obj !== undefined) {\n          return obj;\n        }\n      }\n      \n      // Separate out the child control ID\n      var controlId = null;\n      var pos = id.indexOf('#');\n      if (pos > -1) {\n        controlId = id.substring(pos + 1);\n        id = id.substring(0, pos);\n      }\n      \n      var result = undefined;\n      \n      // Handle paths\n      if (id.indexOf('/') > -1) {\n        var segs = id.split('/');\n        var target = this;\n        var found = segs.every(function(seg) {\n          if (!seg.length) {\n            return true;\n          }\n          if (!target) {\n            return false;\n          }\n          var tmp = target.getObject(seg);\n          if (tmp !== undefined) {\n            target = tmp;\n            return true;\n          }\n        });\n        if (found) {\n          result = target;\n        }\n        \n      } else {\n        // No object, creating the object\n        result = this._createObject(id);\n      }\n      \n      if (result && controlId) {\n        var childControl = result.getChildControl(controlId);\n        return childControl;\n      }\n      \n      return result;\n    },\n    \n    /**\n     * Creates the object and adds it to a list; most classes are expected to\n     * override `_createObjectImpl` NOT this method.\n     * \n     * @param id {String} ID of the object\n     * @return {qx.core.Object?} the created object\n     */\n    _createObject: function(id) {\n      var result = this._createObjectImpl(id);\n      if (result !== undefined) {\n        this.addOwnedObject(result, id);\n      }\n      return result;\n    },\n    \n    /**\n     * Creates the object, intended to be overridden. Null is a valid return\n     * value and will be cached by `getObject`, however `undefined` is NOT a\n     * valid value and so will not be cached meaning that `_createObjectImpl`\n     * will be called multiple times until a valid value is returned.\n     * \n     * @param id {String} ID of the object\n     * @return {qx.core.Object?} the created object\n     */\n    _createObjectImpl: function(id) {\n      return undefined;\n    },\n    \n    /**\n     * Adds an object as owned by this object\n     * \n     * @param obj {qx.core.Object} the object to register\n     * @param id {String?} the id to set when registering the object\n     */\n    addOwnedObject: function(obj, id) {\n      if (!this.__ownedObjects) {\n        this.__ownedObjects = {};\n      }\n      var thatOwner = obj.getOwner();\n      if (thatOwner === this) {\n        return;\n      }\n      obj.__changingOwner = true;\n      try {\n        if (thatOwner) {\n          thatOwner.__removeOwnedObjectImpl(obj);\n        }\n        if (id === undefined) {\n          id = obj.getObjectId();\n        }\n        if (!id) {\n          throw new Error(\"Cannot register an object that has no ID, obj=\" + obj);\n        }\n        if (this.__ownedObjects[id]) {\n          throw new Error(\"Cannot register an object with ID '\" + id + \"' because that ID is already in use, this=\" + this + \", obj=\" + obj);\n        }\n        if (obj.getOwner() != null) {\n          throw new Error(\"Cannot register an object with ID '\" + id + \"' because it is already owned by another object this=\" + this + \", obj=\" + obj);\n        }\n        obj.setOwner(this);\n        obj.setObjectId(id);\n        obj._cascadeObjectIdChanges();\n      } finally {\n        obj.__changingOwner = false;\n      }\n      this.__ownedObjects[id] = obj;\n    },\n\n    /**\n     * Discards an object from the list of owned objects; note that this does\n     * not dispose of the object, simply forgets it if it exists.\n     * \n     * @param args {String|Object} the ID of the object to discard, or the object itself\n     */\n    removeOwnedObject: function(args) {\n      if (!this.__ownedObjects) {\n        throw new Error(\"Cannot discard object because it is not owned by this, this=\" + this + \", object=\" + obj);\n      }\n      \n      var id;\n      var obj;\n      if (typeof args === \"string\") {\n        if (args.indexOf('/') > -1) {\n          throw new Error(\"Cannot discard owned objects based on a path\");\n        }\n        id = args;\n        obj = this.__ownedObjects[id];\n        if (obj === undefined) {\n          return;\n        }\n      } else {\n        obj = args;\n        id = obj.getObjectId();\n        if (this.__ownedObjects[id] !== obj) {\n          throw new Error(\"Cannot discard object because it is not owned by this, this=\" + this + \", object=\" + obj);\n        }\n      }\n\n      if (obj !== null) {\n        obj.__changingOwner = true;\n        try {\n          this.__removeOwnedObjectImpl(obj);\n          obj._cascadeObjectIdChanges();\n        } finally {\n          obj.__changingOwner = false;\n        }\n      }\n    },\n    \n    __removeOwnedObjectImpl: function(obj) {\n      if (obj !== null) {\n        var id = obj.getObjectId();\n        obj.setOwner(null);\n        delete this.__ownedObjects[id];\n      }\n    },\n\n    /**\n     * Returns an array of objects that are owned by this object, or an empty\n     * array if none exists.\n     * \n     * @return {Array}\n     */    \n    getOwnedObjects : function(){\n      return this.__ownedObjects ? Object.values(this.__ownedObjects) : [];\n    }\n  }\n});"
  ]
}