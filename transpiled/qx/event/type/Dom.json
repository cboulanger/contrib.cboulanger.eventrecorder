{
  "className": "qx.event.type.Dom",
  "packageName": "qx.event.type",
  "name": "Dom",
  "superClass": "qx.event.type.Native",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0
      },
      "end": {
        "line": 149,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Common base class for all DOM events."
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "SHIFT_MASK": {
      "location": {
        "start": {
          "line": 33,
          "column": 4
        },
        "end": {
          "line": 33,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The modifier mask for the shift key."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "CTRL_MASK": {
      "location": {
        "start": {
          "line": 36,
          "column": 4
        },
        "end": {
          "line": 36,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The modifier mask for the control key."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "ALT_MASK": {
      "location": {
        "start": {
          "line": 39,
          "column": 4
        },
        "end": {
          "line": 39,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The modifier mask for the alt key."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "META_MASK": {
      "location": {
        "start": {
          "line": 42,
          "column": 4
        },
        "end": {
          "line": 42,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The modifier mask for the meta key (e.g. apple key on Macs)."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "_cloneNativeEvent": {
      "location": {
        "start": {
          "line": 49,
          "column": 4
        },
        "end": {
          "line": 59,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "nativeEvent {Event} The native browser event",
            "paramName": "nativeEvent",
            "description": " The native browser event",
            "type": "qx.event.type.Event"
          },
          {
            "name": "@param",
            "body": "clone {Object} The initialized clone.",
            "paramName": "clone",
            "description": " The initialized clone.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The cloned event",
            "type": "Object",
            "description": " The cloned event"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.event.type.Native",
      "appearsIn": [
        "qx.event.type.Native"
      ]
    },
    "getModifiers": {
      "location": {
        "start": {
          "line": 69,
          "column": 4
        },
        "end": {
          "line": 86,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Return in a bit map, which modifier keys are pressed. The constants\n{@link #SHIFT_MASK}, {@link #CTRL_MASK}, {@link #ALT_MASK} and\n{@link #META_MASK} define the bit positions of the corresponding keys."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} A bit map with the pressed modifier keys.",
            "type": "Integer",
            "description": " A bit map with the pressed modifier keys."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isCtrlPressed": {
      "location": {
        "start": {
          "line": 94,
          "column": 4
        },
        "end": {
          "line": 96,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether the ctrl key is pressed."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the ctrl key is pressed.",
            "type": "Boolean",
            "description": " whether the ctrl key is pressed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isShiftPressed": {
      "location": {
        "start": {
          "line": 104,
          "column": 4
        },
        "end": {
          "line": 106,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether the shift key is pressed."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the shift key is pressed.",
            "type": "Boolean",
            "description": " whether the shift key is pressed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isAltPressed": {
      "location": {
        "start": {
          "line": 114,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether the alt key is pressed."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the alt key is pressed.",
            "type": "Boolean",
            "description": " whether the alt key is pressed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isMetaPressed": {
      "location": {
        "start": {
          "line": 124,
          "column": 4
        },
        "end": {
          "line": 126,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether the meta key is pressed."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the meta key is pressed.",
            "type": "Boolean",
            "description": " whether the meta key is pressed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isCtrlOrCommandPressed": {
      "location": {
        "start": {
          "line": 135,
          "column": 4
        },
        "end": {
          "line": 147,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether the ctrl key or (on the Mac) the command key is pressed."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the command key is pressed on the Mac\nor the ctrl key is pressed on another system.",
            "type": "Boolean",
            "description": " <code>true</code> if the command key is pressed on the Mac\nor the ctrl key is pressed on another system."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getOwner": {
      "type": "function",
      "name": "getOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Native",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>owner</code>.\n\nFor further details take a look at the property definition: {@link #owner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for owner"
          }
        ]
      }
    },
    "setOwner": {
      "type": "function",
      "name": "setOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Native",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>owner</code>.\n\nFor further details take a look at the property definition: {@link #owner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for owner"
          }
        ]
      }
    },
    "resetOwner": {
      "type": "function",
      "name": "resetOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Native",
      "property": "reset"
    },
    "getObjectId": {
      "type": "function",
      "name": "getObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Native",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>objectId</code>.\n\nFor further details take a look at the property definition: {@link #objectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for objectId"
          }
        ]
      }
    },
    "setObjectId": {
      "type": "function",
      "name": "setObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Native",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>objectId</code>.\n\nFor further details take a look at the property definition: {@link #objectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for objectId"
          }
        ]
      }
    },
    "resetObjectId": {
      "type": "function",
      "name": "resetObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Native",
      "property": "reset"
    }
  },
  "descendants": [
    "qx.event.type.KeyInput",
    "qx.event.type.KeySequence",
    "qx.event.type.Mouse",
    "qx.event.type.Touch"
  ]
}